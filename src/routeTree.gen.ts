/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as errors503Import } from './routes/(errors)/503'
import { Route as errors500Import } from './routes/(errors)/500'
import { Route as errors404Import } from './routes/(errors)/404'
import { Route as errors403Import } from './routes/(errors)/403'
import { Route as errors401Import } from './routes/(errors)/401'
import { Route as AuthenticatedMethodsRouteImport } from './routes/_authenticated/methods/route'
import { Route as AuthenticatedMethodsVandermondeImport } from './routes/_authenticated/methods/vandermonde'
import { Route as AuthenticatedMethodsSplineLinearImport } from './routes/_authenticated/methods/spline-linear'
import { Route as AuthenticatedMethodsSplineCubicImport } from './routes/_authenticated/methods/spline-cubic'
import { Route as AuthenticatedMethodsSorImport } from './routes/_authenticated/methods/sor'
import { Route as AuthenticatedMethodsSecantImport } from './routes/_authenticated/methods/secant'
import { Route as AuthenticatedMethodsNewtonRaphsonImport } from './routes/_authenticated/methods/newton-raphson'
import { Route as AuthenticatedMethodsNewtonInterpolantImport } from './routes/_authenticated/methods/newton-interpolant'
import { Route as AuthenticatedMethodsMultipleRootsImport } from './routes/_authenticated/methods/multiple-roots'
import { Route as AuthenticatedMethodsLagrangeImport } from './routes/_authenticated/methods/lagrange'
import { Route as AuthenticatedMethodsJacobiImport } from './routes/_authenticated/methods/jacobi'
import { Route as AuthenticatedMethodsIterativeComparisonImport } from './routes/_authenticated/methods/iterative-comparison'
import { Route as AuthenticatedMethodsInterpolationComparisonImport } from './routes/_authenticated/methods/interpolation-comparison'
import { Route as AuthenticatedMethodsGaussSeidelImport } from './routes/_authenticated/methods/gauss-seidel'
import { Route as AuthenticatedMethodsFixedPointImport } from './routes/_authenticated/methods/fixed-point'
import { Route as AuthenticatedMethodsFalsePositionImport } from './routes/_authenticated/methods/false-position'
import { Route as AuthenticatedMethodsComparisonImport } from './routes/_authenticated/methods/comparison'
import { Route as AuthenticatedMethodsBisectionImport } from './routes/_authenticated/methods/bisection'

// Create/Update Routes

const AuthenticatedRouteRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

const errors503Route = errors503Import.update({
  id: '/(errors)/503',
  path: '/503',
  getParentRoute: () => rootRoute,
} as any)

const errors500Route = errors500Import.update({
  id: '/(errors)/500',
  path: '/500',
  getParentRoute: () => rootRoute,
} as any)

const errors404Route = errors404Import.update({
  id: '/(errors)/404',
  path: '/404',
  getParentRoute: () => rootRoute,
} as any)

const errors403Route = errors403Import.update({
  id: '/(errors)/403',
  path: '/403',
  getParentRoute: () => rootRoute,
} as any)

const errors401Route = errors401Import.update({
  id: '/(errors)/401',
  path: '/401',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedMethodsRouteRoute = AuthenticatedMethodsRouteImport.update({
  id: '/methods',
  path: '/methods',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

const AuthenticatedMethodsVandermondeRoute =
  AuthenticatedMethodsVandermondeImport.update({
    id: '/vandermonde',
    path: '/vandermonde',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

const AuthenticatedMethodsSplineLinearRoute =
  AuthenticatedMethodsSplineLinearImport.update({
    id: '/spline-linear',
    path: '/spline-linear',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

const AuthenticatedMethodsSplineCubicRoute =
  AuthenticatedMethodsSplineCubicImport.update({
    id: '/spline-cubic',
    path: '/spline-cubic',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

const AuthenticatedMethodsSorRoute = AuthenticatedMethodsSorImport.update({
  id: '/sor',
  path: '/sor',
  getParentRoute: () => AuthenticatedMethodsRouteRoute,
} as any)

const AuthenticatedMethodsSecantRoute = AuthenticatedMethodsSecantImport.update(
  {
    id: '/secant',
    path: '/secant',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any,
)

const AuthenticatedMethodsNewtonRaphsonRoute =
  AuthenticatedMethodsNewtonRaphsonImport.update({
    id: '/newton-raphson',
    path: '/newton-raphson',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

const AuthenticatedMethodsNewtonInterpolantRoute =
  AuthenticatedMethodsNewtonInterpolantImport.update({
    id: '/newton-interpolant',
    path: '/newton-interpolant',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

const AuthenticatedMethodsMultipleRootsRoute =
  AuthenticatedMethodsMultipleRootsImport.update({
    id: '/multiple-roots',
    path: '/multiple-roots',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

const AuthenticatedMethodsLagrangeRoute =
  AuthenticatedMethodsLagrangeImport.update({
    id: '/lagrange',
    path: '/lagrange',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

const AuthenticatedMethodsJacobiRoute = AuthenticatedMethodsJacobiImport.update(
  {
    id: '/jacobi',
    path: '/jacobi',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any,
)

const AuthenticatedMethodsIterativeComparisonRoute =
  AuthenticatedMethodsIterativeComparisonImport.update({
    id: '/iterative-comparison',
    path: '/iterative-comparison',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

const AuthenticatedMethodsInterpolationComparisonRoute =
  AuthenticatedMethodsInterpolationComparisonImport.update({
    id: '/interpolation-comparison',
    path: '/interpolation-comparison',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

const AuthenticatedMethodsGaussSeidelRoute =
  AuthenticatedMethodsGaussSeidelImport.update({
    id: '/gauss-seidel',
    path: '/gauss-seidel',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

const AuthenticatedMethodsFixedPointRoute =
  AuthenticatedMethodsFixedPointImport.update({
    id: '/fixed-point',
    path: '/fixed-point',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

const AuthenticatedMethodsFalsePositionRoute =
  AuthenticatedMethodsFalsePositionImport.update({
    id: '/false-position',
    path: '/false-position',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

const AuthenticatedMethodsComparisonRoute =
  AuthenticatedMethodsComparisonImport.update({
    id: '/comparison',
    path: '/comparison',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

const AuthenticatedMethodsBisectionRoute =
  AuthenticatedMethodsBisectionImport.update({
    id: '/bisection',
    path: '/bisection',
    getParentRoute: () => AuthenticatedMethodsRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/methods': {
      id: '/_authenticated/methods'
      path: '/methods'
      fullPath: '/methods'
      preLoaderRoute: typeof AuthenticatedMethodsRouteImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401Import
      parentRoute: typeof rootRoute
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403Import
      parentRoute: typeof rootRoute
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404Import
      parentRoute: typeof rootRoute
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500Import
      parentRoute: typeof rootRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503Import
      parentRoute: typeof rootRoute
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/methods/bisection': {
      id: '/_authenticated/methods/bisection'
      path: '/bisection'
      fullPath: '/methods/bisection'
      preLoaderRoute: typeof AuthenticatedMethodsBisectionImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/comparison': {
      id: '/_authenticated/methods/comparison'
      path: '/comparison'
      fullPath: '/methods/comparison'
      preLoaderRoute: typeof AuthenticatedMethodsComparisonImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/false-position': {
      id: '/_authenticated/methods/false-position'
      path: '/false-position'
      fullPath: '/methods/false-position'
      preLoaderRoute: typeof AuthenticatedMethodsFalsePositionImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/fixed-point': {
      id: '/_authenticated/methods/fixed-point'
      path: '/fixed-point'
      fullPath: '/methods/fixed-point'
      preLoaderRoute: typeof AuthenticatedMethodsFixedPointImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/gauss-seidel': {
      id: '/_authenticated/methods/gauss-seidel'
      path: '/gauss-seidel'
      fullPath: '/methods/gauss-seidel'
      preLoaderRoute: typeof AuthenticatedMethodsGaussSeidelImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/interpolation-comparison': {
      id: '/_authenticated/methods/interpolation-comparison'
      path: '/interpolation-comparison'
      fullPath: '/methods/interpolation-comparison'
      preLoaderRoute: typeof AuthenticatedMethodsInterpolationComparisonImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/iterative-comparison': {
      id: '/_authenticated/methods/iterative-comparison'
      path: '/iterative-comparison'
      fullPath: '/methods/iterative-comparison'
      preLoaderRoute: typeof AuthenticatedMethodsIterativeComparisonImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/jacobi': {
      id: '/_authenticated/methods/jacobi'
      path: '/jacobi'
      fullPath: '/methods/jacobi'
      preLoaderRoute: typeof AuthenticatedMethodsJacobiImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/lagrange': {
      id: '/_authenticated/methods/lagrange'
      path: '/lagrange'
      fullPath: '/methods/lagrange'
      preLoaderRoute: typeof AuthenticatedMethodsLagrangeImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/multiple-roots': {
      id: '/_authenticated/methods/multiple-roots'
      path: '/multiple-roots'
      fullPath: '/methods/multiple-roots'
      preLoaderRoute: typeof AuthenticatedMethodsMultipleRootsImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/newton-interpolant': {
      id: '/_authenticated/methods/newton-interpolant'
      path: '/newton-interpolant'
      fullPath: '/methods/newton-interpolant'
      preLoaderRoute: typeof AuthenticatedMethodsNewtonInterpolantImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/newton-raphson': {
      id: '/_authenticated/methods/newton-raphson'
      path: '/newton-raphson'
      fullPath: '/methods/newton-raphson'
      preLoaderRoute: typeof AuthenticatedMethodsNewtonRaphsonImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/secant': {
      id: '/_authenticated/methods/secant'
      path: '/secant'
      fullPath: '/methods/secant'
      preLoaderRoute: typeof AuthenticatedMethodsSecantImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/sor': {
      id: '/_authenticated/methods/sor'
      path: '/sor'
      fullPath: '/methods/sor'
      preLoaderRoute: typeof AuthenticatedMethodsSorImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/spline-cubic': {
      id: '/_authenticated/methods/spline-cubic'
      path: '/spline-cubic'
      fullPath: '/methods/spline-cubic'
      preLoaderRoute: typeof AuthenticatedMethodsSplineCubicImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/spline-linear': {
      id: '/_authenticated/methods/spline-linear'
      path: '/spline-linear'
      fullPath: '/methods/spline-linear'
      preLoaderRoute: typeof AuthenticatedMethodsSplineLinearImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
    '/_authenticated/methods/vandermonde': {
      id: '/_authenticated/methods/vandermonde'
      path: '/vandermonde'
      fullPath: '/methods/vandermonde'
      preLoaderRoute: typeof AuthenticatedMethodsVandermondeImport
      parentRoute: typeof AuthenticatedMethodsRouteImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedMethodsRouteRouteChildren {
  AuthenticatedMethodsBisectionRoute: typeof AuthenticatedMethodsBisectionRoute
  AuthenticatedMethodsComparisonRoute: typeof AuthenticatedMethodsComparisonRoute
  AuthenticatedMethodsFalsePositionRoute: typeof AuthenticatedMethodsFalsePositionRoute
  AuthenticatedMethodsFixedPointRoute: typeof AuthenticatedMethodsFixedPointRoute
  AuthenticatedMethodsGaussSeidelRoute: typeof AuthenticatedMethodsGaussSeidelRoute
  AuthenticatedMethodsInterpolationComparisonRoute: typeof AuthenticatedMethodsInterpolationComparisonRoute
  AuthenticatedMethodsIterativeComparisonRoute: typeof AuthenticatedMethodsIterativeComparisonRoute
  AuthenticatedMethodsJacobiRoute: typeof AuthenticatedMethodsJacobiRoute
  AuthenticatedMethodsLagrangeRoute: typeof AuthenticatedMethodsLagrangeRoute
  AuthenticatedMethodsMultipleRootsRoute: typeof AuthenticatedMethodsMultipleRootsRoute
  AuthenticatedMethodsNewtonInterpolantRoute: typeof AuthenticatedMethodsNewtonInterpolantRoute
  AuthenticatedMethodsNewtonRaphsonRoute: typeof AuthenticatedMethodsNewtonRaphsonRoute
  AuthenticatedMethodsSecantRoute: typeof AuthenticatedMethodsSecantRoute
  AuthenticatedMethodsSorRoute: typeof AuthenticatedMethodsSorRoute
  AuthenticatedMethodsSplineCubicRoute: typeof AuthenticatedMethodsSplineCubicRoute
  AuthenticatedMethodsSplineLinearRoute: typeof AuthenticatedMethodsSplineLinearRoute
  AuthenticatedMethodsVandermondeRoute: typeof AuthenticatedMethodsVandermondeRoute
}

const AuthenticatedMethodsRouteRouteChildren: AuthenticatedMethodsRouteRouteChildren =
  {
    AuthenticatedMethodsBisectionRoute: AuthenticatedMethodsBisectionRoute,
    AuthenticatedMethodsComparisonRoute: AuthenticatedMethodsComparisonRoute,
    AuthenticatedMethodsFalsePositionRoute:
      AuthenticatedMethodsFalsePositionRoute,
    AuthenticatedMethodsFixedPointRoute: AuthenticatedMethodsFixedPointRoute,
    AuthenticatedMethodsGaussSeidelRoute: AuthenticatedMethodsGaussSeidelRoute,
    AuthenticatedMethodsInterpolationComparisonRoute:
      AuthenticatedMethodsInterpolationComparisonRoute,
    AuthenticatedMethodsIterativeComparisonRoute:
      AuthenticatedMethodsIterativeComparisonRoute,
    AuthenticatedMethodsJacobiRoute: AuthenticatedMethodsJacobiRoute,
    AuthenticatedMethodsLagrangeRoute: AuthenticatedMethodsLagrangeRoute,
    AuthenticatedMethodsMultipleRootsRoute:
      AuthenticatedMethodsMultipleRootsRoute,
    AuthenticatedMethodsNewtonInterpolantRoute:
      AuthenticatedMethodsNewtonInterpolantRoute,
    AuthenticatedMethodsNewtonRaphsonRoute:
      AuthenticatedMethodsNewtonRaphsonRoute,
    AuthenticatedMethodsSecantRoute: AuthenticatedMethodsSecantRoute,
    AuthenticatedMethodsSorRoute: AuthenticatedMethodsSorRoute,
    AuthenticatedMethodsSplineCubicRoute: AuthenticatedMethodsSplineCubicRoute,
    AuthenticatedMethodsSplineLinearRoute:
      AuthenticatedMethodsSplineLinearRoute,
    AuthenticatedMethodsVandermondeRoute: AuthenticatedMethodsVandermondeRoute,
  }

const AuthenticatedMethodsRouteRouteWithChildren =
  AuthenticatedMethodsRouteRoute._addFileChildren(
    AuthenticatedMethodsRouteRouteChildren,
  )

interface AuthenticatedRouteRouteChildren {
  AuthenticatedMethodsRouteRoute: typeof AuthenticatedMethodsRouteRouteWithChildren
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedMethodsRouteRoute: AuthenticatedMethodsRouteRouteWithChildren,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRouteRouteWithChildren
  '/methods': typeof AuthenticatedMethodsRouteRouteWithChildren
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/': typeof AuthenticatedIndexRoute
  '/methods/bisection': typeof AuthenticatedMethodsBisectionRoute
  '/methods/comparison': typeof AuthenticatedMethodsComparisonRoute
  '/methods/false-position': typeof AuthenticatedMethodsFalsePositionRoute
  '/methods/fixed-point': typeof AuthenticatedMethodsFixedPointRoute
  '/methods/gauss-seidel': typeof AuthenticatedMethodsGaussSeidelRoute
  '/methods/interpolation-comparison': typeof AuthenticatedMethodsInterpolationComparisonRoute
  '/methods/iterative-comparison': typeof AuthenticatedMethodsIterativeComparisonRoute
  '/methods/jacobi': typeof AuthenticatedMethodsJacobiRoute
  '/methods/lagrange': typeof AuthenticatedMethodsLagrangeRoute
  '/methods/multiple-roots': typeof AuthenticatedMethodsMultipleRootsRoute
  '/methods/newton-interpolant': typeof AuthenticatedMethodsNewtonInterpolantRoute
  '/methods/newton-raphson': typeof AuthenticatedMethodsNewtonRaphsonRoute
  '/methods/secant': typeof AuthenticatedMethodsSecantRoute
  '/methods/sor': typeof AuthenticatedMethodsSorRoute
  '/methods/spline-cubic': typeof AuthenticatedMethodsSplineCubicRoute
  '/methods/spline-linear': typeof AuthenticatedMethodsSplineLinearRoute
  '/methods/vandermonde': typeof AuthenticatedMethodsVandermondeRoute
}

export interface FileRoutesByTo {
  '/methods': typeof AuthenticatedMethodsRouteRouteWithChildren
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/': typeof AuthenticatedIndexRoute
  '/methods/bisection': typeof AuthenticatedMethodsBisectionRoute
  '/methods/comparison': typeof AuthenticatedMethodsComparisonRoute
  '/methods/false-position': typeof AuthenticatedMethodsFalsePositionRoute
  '/methods/fixed-point': typeof AuthenticatedMethodsFixedPointRoute
  '/methods/gauss-seidel': typeof AuthenticatedMethodsGaussSeidelRoute
  '/methods/interpolation-comparison': typeof AuthenticatedMethodsInterpolationComparisonRoute
  '/methods/iterative-comparison': typeof AuthenticatedMethodsIterativeComparisonRoute
  '/methods/jacobi': typeof AuthenticatedMethodsJacobiRoute
  '/methods/lagrange': typeof AuthenticatedMethodsLagrangeRoute
  '/methods/multiple-roots': typeof AuthenticatedMethodsMultipleRootsRoute
  '/methods/newton-interpolant': typeof AuthenticatedMethodsNewtonInterpolantRoute
  '/methods/newton-raphson': typeof AuthenticatedMethodsNewtonRaphsonRoute
  '/methods/secant': typeof AuthenticatedMethodsSecantRoute
  '/methods/sor': typeof AuthenticatedMethodsSorRoute
  '/methods/spline-cubic': typeof AuthenticatedMethodsSplineCubicRoute
  '/methods/spline-linear': typeof AuthenticatedMethodsSplineLinearRoute
  '/methods/vandermonde': typeof AuthenticatedMethodsVandermondeRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/_authenticated/methods': typeof AuthenticatedMethodsRouteRouteWithChildren
  '/(errors)/401': typeof errors401Route
  '/(errors)/403': typeof errors403Route
  '/(errors)/404': typeof errors404Route
  '/(errors)/500': typeof errors500Route
  '/(errors)/503': typeof errors503Route
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/methods/bisection': typeof AuthenticatedMethodsBisectionRoute
  '/_authenticated/methods/comparison': typeof AuthenticatedMethodsComparisonRoute
  '/_authenticated/methods/false-position': typeof AuthenticatedMethodsFalsePositionRoute
  '/_authenticated/methods/fixed-point': typeof AuthenticatedMethodsFixedPointRoute
  '/_authenticated/methods/gauss-seidel': typeof AuthenticatedMethodsGaussSeidelRoute
  '/_authenticated/methods/interpolation-comparison': typeof AuthenticatedMethodsInterpolationComparisonRoute
  '/_authenticated/methods/iterative-comparison': typeof AuthenticatedMethodsIterativeComparisonRoute
  '/_authenticated/methods/jacobi': typeof AuthenticatedMethodsJacobiRoute
  '/_authenticated/methods/lagrange': typeof AuthenticatedMethodsLagrangeRoute
  '/_authenticated/methods/multiple-roots': typeof AuthenticatedMethodsMultipleRootsRoute
  '/_authenticated/methods/newton-interpolant': typeof AuthenticatedMethodsNewtonInterpolantRoute
  '/_authenticated/methods/newton-raphson': typeof AuthenticatedMethodsNewtonRaphsonRoute
  '/_authenticated/methods/secant': typeof AuthenticatedMethodsSecantRoute
  '/_authenticated/methods/sor': typeof AuthenticatedMethodsSorRoute
  '/_authenticated/methods/spline-cubic': typeof AuthenticatedMethodsSplineCubicRoute
  '/_authenticated/methods/spline-linear': typeof AuthenticatedMethodsSplineLinearRoute
  '/_authenticated/methods/vandermonde': typeof AuthenticatedMethodsVandermondeRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/methods'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/'
    | '/methods/bisection'
    | '/methods/comparison'
    | '/methods/false-position'
    | '/methods/fixed-point'
    | '/methods/gauss-seidel'
    | '/methods/interpolation-comparison'
    | '/methods/iterative-comparison'
    | '/methods/jacobi'
    | '/methods/lagrange'
    | '/methods/multiple-roots'
    | '/methods/newton-interpolant'
    | '/methods/newton-raphson'
    | '/methods/secant'
    | '/methods/sor'
    | '/methods/spline-cubic'
    | '/methods/spline-linear'
    | '/methods/vandermonde'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/methods'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/'
    | '/methods/bisection'
    | '/methods/comparison'
    | '/methods/false-position'
    | '/methods/fixed-point'
    | '/methods/gauss-seidel'
    | '/methods/interpolation-comparison'
    | '/methods/iterative-comparison'
    | '/methods/jacobi'
    | '/methods/lagrange'
    | '/methods/multiple-roots'
    | '/methods/newton-interpolant'
    | '/methods/newton-raphson'
    | '/methods/secant'
    | '/methods/sor'
    | '/methods/spline-cubic'
    | '/methods/spline-linear'
    | '/methods/vandermonde'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_authenticated/methods'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/_authenticated/'
    | '/_authenticated/methods/bisection'
    | '/_authenticated/methods/comparison'
    | '/_authenticated/methods/false-position'
    | '/_authenticated/methods/fixed-point'
    | '/_authenticated/methods/gauss-seidel'
    | '/_authenticated/methods/interpolation-comparison'
    | '/_authenticated/methods/iterative-comparison'
    | '/_authenticated/methods/jacobi'
    | '/_authenticated/methods/lagrange'
    | '/_authenticated/methods/multiple-roots'
    | '/_authenticated/methods/newton-interpolant'
    | '/_authenticated/methods/newton-raphson'
    | '/_authenticated/methods/secant'
    | '/_authenticated/methods/sor'
    | '/_authenticated/methods/spline-cubic'
    | '/_authenticated/methods/spline-linear'
    | '/_authenticated/methods/vandermonde'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  errors401Route: typeof errors401Route
  errors403Route: typeof errors403Route
  errors404Route: typeof errors404Route
  errors500Route: typeof errors500Route
  errors503Route: typeof errors503Route
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  errors401Route: errors401Route,
  errors403Route: errors403Route,
  errors404Route: errors404Route,
  errors500Route: errors500Route,
  errors503Route: errors503Route,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/(errors)/401",
        "/(errors)/403",
        "/(errors)/404",
        "/(errors)/500",
        "/(errors)/503"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated/route.tsx",
      "children": [
        "/_authenticated/methods",
        "/_authenticated/"
      ]
    },
    "/_authenticated/methods": {
      "filePath": "_authenticated/methods/route.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/methods/bisection",
        "/_authenticated/methods/comparison",
        "/_authenticated/methods/false-position",
        "/_authenticated/methods/fixed-point",
        "/_authenticated/methods/gauss-seidel",
        "/_authenticated/methods/interpolation-comparison",
        "/_authenticated/methods/iterative-comparison",
        "/_authenticated/methods/jacobi",
        "/_authenticated/methods/lagrange",
        "/_authenticated/methods/multiple-roots",
        "/_authenticated/methods/newton-interpolant",
        "/_authenticated/methods/newton-raphson",
        "/_authenticated/methods/secant",
        "/_authenticated/methods/sor",
        "/_authenticated/methods/spline-cubic",
        "/_authenticated/methods/spline-linear",
        "/_authenticated/methods/vandermonde"
      ]
    },
    "/(errors)/401": {
      "filePath": "(errors)/401.tsx"
    },
    "/(errors)/403": {
      "filePath": "(errors)/403.tsx"
    },
    "/(errors)/404": {
      "filePath": "(errors)/404.tsx"
    },
    "/(errors)/500": {
      "filePath": "(errors)/500.tsx"
    },
    "/(errors)/503": {
      "filePath": "(errors)/503.tsx"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/methods/bisection": {
      "filePath": "_authenticated/methods/bisection.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/comparison": {
      "filePath": "_authenticated/methods/comparison.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/false-position": {
      "filePath": "_authenticated/methods/false-position.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/fixed-point": {
      "filePath": "_authenticated/methods/fixed-point.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/gauss-seidel": {
      "filePath": "_authenticated/methods/gauss-seidel.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/interpolation-comparison": {
      "filePath": "_authenticated/methods/interpolation-comparison.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/iterative-comparison": {
      "filePath": "_authenticated/methods/iterative-comparison.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/jacobi": {
      "filePath": "_authenticated/methods/jacobi.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/lagrange": {
      "filePath": "_authenticated/methods/lagrange.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/multiple-roots": {
      "filePath": "_authenticated/methods/multiple-roots.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/newton-interpolant": {
      "filePath": "_authenticated/methods/newton-interpolant.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/newton-raphson": {
      "filePath": "_authenticated/methods/newton-raphson.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/secant": {
      "filePath": "_authenticated/methods/secant.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/sor": {
      "filePath": "_authenticated/methods/sor.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/spline-cubic": {
      "filePath": "_authenticated/methods/spline-cubic.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/spline-linear": {
      "filePath": "_authenticated/methods/spline-linear.tsx",
      "parent": "/_authenticated/methods"
    },
    "/_authenticated/methods/vandermonde": {
      "filePath": "_authenticated/methods/vandermonde.tsx",
      "parent": "/_authenticated/methods"
    }
  }
}
ROUTE_MANIFEST_END */
